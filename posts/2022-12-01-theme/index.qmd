---
title: Migrating this Blog from *Distill* to *Quarto* Publishing Framework
subtitle: Mastering Quarto Markdown for Literate Programming and Web Publishing
date: 2023-10-01
date-modified: last-modified
image: thumb.svg
categories:
  - quarto
  - dataviz
draft: false
freeze: false
abstract: |
  A post about literate programming in general and Quarto formats in particular to
  document migrating this personal blog from
  [Distill](https://rstudio.github.io/distill/) to [Quarto](https://quarto.org/).
  Compared with *J.J. Allaire's Distill for R Markdown*, **PositÂ® Quarto Markdown** uses
  a new templating system built on top of [Bootstrap
  v5.3.1](https://getbootstrap.com/docs/5.3/customize/overview/) with new page layouts,
  extended export formats, and more flexible publishing workflows.
  This post briefly outlines my process for creating a custom theme for this
  Quarto-generated website, as well as design tweaks I have made along the way.
---

```{r}
#| echo: false
#| column: screen
#| classes: mb-4

library(leaflet)
leaflet(width="100%", height="15rem") %>% addTiles() %>%
  addMarkers(-8.65406047010657, 41.14426475811268, 
    label="Me, as I'm writing this post. Read on, tips below!", 
    labelOptions=labelOptions(textsize="1rem"))
```

With the release of **Quarto 1.4**, markdown-based publishing is gaining popularity, way beyond the scientific community. Multilingual text-based documents (such as **Rmarkdown** and **Jupyter** notebooks) that combine executable code chunks with formatted prose greatly simplify the process of drafting, iterating, generating, documenting, sharing and reproducing computable research experiments.

Old-time researchers and engineers have long used **Emacs `Org-Mode`**[^sw] along with its wild hordes of keyboard shortcuts[^kb] to achieve similar results thanks to *Eric Schulte*'s incredible **babel** extension to `Org-Mode` [see @schulte2012] and to *John MacFarlane*'s [Pandoc](https://pandoc.org/) document converter library -- but nowadays Quarto makes use of more efficient parsers and runtime engines (Sass, Deno) and adds in-browser real-time rendering of documents.

[^sw]: For folks born in this century, to **babel** (*elips*) or to **sweave** (*R*) is the process of compiling text documents that include both static markup and executable scripts.

    ![](Donald-Knuth.jpg){width="10em" .img-rounded}

    The concept of **Literate programming** was introduced in 1984 by the mathematician [Donald Knuth](https://en.wikipedia.org/wiki/Donald_Knuth) and was widely popularized thereafter in the engineering community thanks to [org-mode](https://orgmode.org/worg/org-contrib/babel/uses.html) in the Emacs editor.

    ![](Carsten-Dominik.jpg){width="10em" .img-rounded}
  
    Emacs **`Org-Mode`** was created by the astronomer [Carsten Dominik](https://en.wikipedia.org/wiki/Org-mode#:~:text=Org%20Mode%20was%20created%20by,mode%20by%20default%20since%202006) in 2003 and remains to this day one of the most used and madly loved note-taking and GTD (Get-Things-Done) tools, with many of its functionality (agenda, tags, etc.) yet to be ported to any markdown engine.
    
[^kb]: Only keyboard, Baby!

    ![](real-programmers.png){.lightbox}


As I am migrating my old blog posts to the new Quarto markdown syntax, this post briefly outlines my process for creating a custom Bootstrap theme for this revamped website. Feel free to reuse my `theme.scss` Sass file and tidbits.


# CSS Grid System

One of the many great features of Quarto is that the framework uses the full flexibility of Bootstrap v5.3 grid system, with a few handy classes to help precisely position content on a page, in particular:

- 2 predefined (column-based) page layouts:
  - `page-layout: article` (this document), and
  - `page-layout: full`
- 6 column classes to control content width (shown below)
- 2 margin classes to shift content into the left or right column (like that XKCD comics):
  - `<div class="column-margin">`, and
  - `<span class="aside">` 
- 8 classes to overflow content into the left or right margin

For example I use Quarto `{.column-screen}` CSS class to place a flushed banner directly below the post header, as a way to highlight static or dynamic content[^nb1]. Here is the R code chunk to achieve this, which output inside a `<div class="column-screen">` element, like the map above.

[^nb1]: Note that, as of time of writing, this will push and collapse the TOC to the top of the page until the user scrolls past the first `<div class="column-screen">` element. 

```{{r}}
#| column: screen

library(leaflet)
leaflet(width="100%", height="15em") %>% addTiles() %>%
  addMarkers(-8.65406047010657, 41.14426475811268, 
    label="Me, as I'm writing this post. Read on, tips below!", 
    labelOptions=labelOptions(textsize="1rem"))
```


There are new Quarto CSS classes to help control content width and placement.

:::{.column-body .striped .mb-2}
.column-body
:::

:::{.column-body-outset .striped .mb-2}
.column-body-outset
:::

:::{.column-page .striped .mb-2}
.column-page
:::

:::{.column-page-inset .striped .mb-2}
.column-page-inset
:::

:::{.column-screen .striped .mb-2}
.column-screen
:::

:::{.column-screen-inset .striped .mb-4}
.column-screen-inset-shaded
:::

Finally any layout is achievable using stackable `<div class="g-col-{width}">` columns inside a custom `<div class="grid">` element (see color boxes below). The full system summarized here, copied straight from Quarto online (awesome) documentation[^doc].

[^doc]: Refer to [Quarto CSS classes](https://quarto.org/docs/authoring/article-layout.html#available-columns) official documentation.

::: column-page-right
+--------------+---------------------------------+---------------------------------+
| Column       | Code Cell `column`              | Class Name                      |
+==============+=================================+=================================+
| Body         |     column: body                |     .column-body                |
|              |     column: body-outset         |     .column-body-outset         |
|              |     column: body-outset-left    |     .column-body-outset-left    |
|              |     column: body-outset-right   |     .column-body-outset-right   |
+--------------+---------------------------------+---------------------------------+
| Page Inset   |     column: page-inset-left     |     .column-page-inset-left     |
|              |     column: page-inset-right    |     .column-page-inset-right    |
+--------------+---------------------------------+---------------------------------+
| Page         |     column: page                |     .column-page                |
|              |     column: page-left           |     .column-page-left           |
|              |     column: page-right          |     .column-page-right          |
+--------------+---------------------------------+---------------------------------+
| Screen Inset |     column: screen-inset        |     .column-screen-inset        |
|              |     column: screen-inset-shaded |     .column-screen-inset-shaded |
|              |     column: screen-inset-left   |     .column-screen-inset-left   |
|              |     column: screen-inset-right  |     .column-screen-inset-right  |
+--------------+---------------------------------+---------------------------------+
| Screen       |     column: screen              |     .column-screen              |
|              |     column: screen-left         |     .column-screen-left         |
|              |     column: screen-right        |     .column-screen-right        |
+--------------+---------------------------------+---------------------------------+
| Margin       |     column: margin              |     .column-margin / .aside     |
+--------------+---------------------------------+---------------------------------+
:::

A paragraph right next to table.


# Color Scheme

Choosing a color scheme is easy, you can start from your favorite photo or graphic and upload it to one of the many online **color palette generators** to extract base and accent colors. Below I have selected a standard 12-color palette that simply strives to complement my decade old [Kubuntu desktop](https://store.kde.org/p/1980663)[^kde] (in a light version). A remarkable  generator I have used for many UI themes is []().

[^kde]: KDE, 30 years later, still going strong!
![](https://images.pling.com/img/00/00/51/57/23/1980663/screenshot-20230201-205024.png){.lightbox}


```{r}
#| output: asis

library(htmltools)

pal <- c(
  cyan   = "#789494",
  teal   = "#445e64",
  dark   = "#222e32",
  pink   = "#aea39a",
  purple = "#98796f",
  indigo = "#9b59b6",
  blue   = "#3daee9",
  green  = "#27ae60",
  yellow = "#edcd37",
  orange = "#f67400",
  red    = "#da4453",
  light  = "#fefefe"
)

n <- c(rep(2,6), rep(4,6))

lapply(1:length(pal),
  function(i) div(class=paste0(
    "g-col-", n[i], " small rounded text-center p-2 bg-", names(pal)[i]), 
    HTML(names(pal)[i], "<br/>(", pal[[i]], ")"))) |> 
  tagList() |> 
  div(class="grid", style="--bs-gap: .5rem;")
```

# Block Elements

Simple indented blockquote with (small) source.

> Blockquote title  
> Blockquote content comes here...   
> <small>-- And small description</small>

Bootstrap built-in **callout blocks** and **cards** components are readily available in Quarto markdown with the usual semantic colors.

::: {.callout}
Note that there are 6 types of callout blocks, including:
`default`, `note`, `warning`, `important`, `tip`, and `caution`.
:::

::: {.callout-note}
This is a note.
:::

```markdown
::: {.callout-tip}
### Callout title
This is an example of a callout with a title.
:::
```

::: {.callout-tip}
### Callout title
This is an example of a callout with a title.
:::

```markdown
::: {.callout-caution collapse="true"}
### Expand to learn about collapse
This is an example of a 'folded' caution callout
:::
```

::: {.callout-caution collapse="true"}
### Expand to learn about collapse

This is an example of a "folded" caution callout that can be expanded by the user. You can use `collapse="true"` to collapse it by default or `collapse="false"` to make a collapsible callout that is expanded by default.
:::

::: {.callout-important title="Important"}
This is a callout with a title.
:::

::: {.callout-warning title="Warning"}
This is a callout with a title.
:::


# Typography

Bootstrap default line-height and font sizing typically work. No change here aside from using `PT Serif`, `Oswald`, and `Roboto Condensed` fonts. This is how **bold**, *italic*, and <small>small</small> text look like. Here is ^superscript^ and ~subscript~ text, and ~~strikethrough~~ notes. Semantic colors with <span class="text-info">.text-info</span> provide accented text. I have added 2 background classes for my own use <span class="shaded">`.shaded`</span> and <span class="striped">`.striped`</span>. I also use secondary font for all post metadata, end and margin notes, and for captioning.

## Heading 2

Sample paragraph content.

### Heading 3

Sample paragraph content with list of items:

- List 1
- List 2
- List 3

Ordered list:

#. List 1  
#. List 2  
#. List 3

#### Heading 4

Sample paragraph content.

> Blockquote title  
> Blockquote content comes here...   
> <small>-- And small source</small>

##### Heading 5

Sample paragraph content.

Here is a footnote reference[^1] and another much longer one[^longnote]. Caption and footnote placement can be controlled in the config files `_quarto_yml` and/or `_metadata.yml`, or directly in the YAML front matter.

[^1]: Here is the footnote.

[^longnote]: Here's one with multiple blocks.

    With subsequent paragraphs indented to show that they belong to the previous footnote.

# Tables

I prefer my normal tables slightly more condensed than Bootstrap's default and to resemble LaTeX typesetting, so made a few simple changes here.

|        |        |
|--------|--------|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: My default table spacing

| fruit  | price  |
|--------|--------|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: borderless hover sm {.borderless .hover .sm}

| fruit  | price  |
|--------|--------|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: striped hover sm {.striped .hover .sm}

| fruit  | price  |
|--------|--------|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: striped hover sm secondary {.striped .hover .sm .secondary}

```{r}
#| column: page
#| tbl-cap: A full-width table to increase content space

knitr::kable(mtcars[1:6, 1:10])
```


# Apply Themed Colors to R Graphics

I make use of R `thematic::thematic_on()` package to auto-generate `base graphics`, `lattice` and `ggplot2` font and palettes that match the new Bootstrap scheme.

```{r}
#| eval: false

# Specify your sequential and qualitative palettes
thematic::thematic_on(
  bg = "transparent", fg = "#333333", accent = pal["cyan"],
  font = font_spec("Roboto Condensed"),
  sequential = sequential_gradient(fg_weight=.5, bg_weight=.5, fg_low=FALSE),
  qualitative = alpha(pal[1:12], .85)
  )
```

Note that calling `thematic_on()` modifies R session  `getOption("ggplot2.discrete.colour")` and `getOption("ggplot2.discrete.fill")` -- and that's how the underlying "magic" happens.

Next I apply (slightly opinionated) changes to `ggthemes::theme_foundation()`, mostly transparent fills, condensed font, simplified axes, and a y-axis on the right side.

These graphic customizations are further documented in `./R/theme.R` in this repo, so as to handle dependencies, and because I want to use them more flexibly across my blog posts. Obviously when visualizing scientific and spatial datasets the choice of color scales requires good care, so the use of `thematic_on()` is often not sufficient, but it's a good start here nonetheless.

```{r filename="./R/theme.R"}
#| file: ../../R/theme.R
#| code-fold: true
#| code-summary: "Show all code"
#| eval: false

```

Finally let's output a couple of categorical and continuous `ggplot` and `lattice` charts below to make sure everything looks adequate.

```{r}
# Apply and check my new graphic theme
library(mblabs)
library(ggplot2)
theme_labs_on()

```

```{r}
ggplot(mtcars, aes(factor(carb), mpg, fill=factor(carb))) + geom_col() +
  guides(y=guide_none(), y.sec=guide_axis()) +
  labs(
    title="My Long and Descriptive Plot Title", 
    subtitle="My very long subtitle with many units", 
    caption="My very long plot caption with many references.") +
  theme_labs()
```

```{r}
ggplot(mtcars, aes(wt, mpg, color=carb)) + 
  geom_point() + geom_smooth() +
  guides(y=guide_none(), y.sec=guide_axis()) +
  labs(
    title="My Long and Descriptive Plot Title", 
    subtitle="My very long subtitle with many units", 
    caption="My very long plot caption with many references.") +
  theme_labs()
```

Note that the code chunk below produces a PNG instead of SVG file. I also set `knitr` option globally `fig-dpi: 220` so plots still look decent when printed to paper (though of course it's not adequate on long pages with many plots). 

```{r}
#| echo: fenced
#| fig-format: png

gglabs(faithfuld, aes(waiting, eruptions, z=density)) +
  geom_raster(aes(fill=density)) +
  geom_contour()
```

```{r}
gglabs(mtcars, aes(wt, mpg, color=factor(cyl))) + geom_point() +
  labs(title="My Title", subtitle="My Subtitle", caption="My plot caption")
```

Note that `thematic_on()` also does a little magic with R base graphics `par()` options. This is important as many advanced statistical and spatial libraries in R continue to make use of R base `graphics` library.

```{r}
lattice::show.settings()

x <- rchisq(100, df=4)
hist(x, freq=FALSE, ylim=c(0, 0.2), col=1:11, border=12)
grid(NA, NULL, col=4)
curve(dchisq(x, df=4), col=2, lty=2, lwd=2, add=TRUE)
```
