---
title: Configuring a Quarto Website
subtitle: The best of Boostrap 5 CSS
date: 2022-12-01
date-modified: last-modified
image: thumb.svg
categories:
  - quarto
  - web design
draft: false
freeze: false
description: |
  A hotchpotch of Boostrap 5 tips and theme tweaks I have made on this website -- 
  documented here with love. Feel free to reuse my [`theme.scss`](/www/theme-light.scss).
abstract: |
  Random content to help me migrate this personal blog from
  [distill](https://rstudio.github.io/distill/) to [quarto](https://quarto.org/). 
  Quarto uses a new templating system built on top of 
  [Bootstrap 5](https://getbootstrap.com/docs/5.0/) with new page layout and extended
  publishing formats.
---

::: {.column-screen}

```{r}
#| echo: false

library(leaflet)
m <- leaflet(width="100%", height="10rem") %>% addTiles()
m
```

:::

Sometimes I may want an optional flushed banner with random static or dynamic content. Note that this will push and collapse the TOC to the top of the page until the user scrolls past the `<div>`. For example here is how to insert a dynamic map inside a flushed `<div class="column-screen">` element, like the one just above:

````markdown
  ::: {.column-screen}
  ```{{r}}
  library(leaflet)
  leaflet(width="100%", height="10rem") %>% addTiles()
  ```
  :::
````  

# Color System

Choosing a color scheme is easy, you can start from your favorite photo or graphic and upload it to one of the many online palette generators to extract base and accent colors. Below I have selected a standard 12-color palette that strives to complement my decade old [Kubuntu desktop](https://store.kde.org/p/1980663)[^kde].

[^kde]: KDE, 30 years later, still going strong!
![](https://images.pling.com/img/00/00/51/57/23/1980663/screenshot-20230201-205024.png){width=80% .lightbox}


```{r}
#| output: asis

library(htmltools)

x <- c("info", "success", "warning", "danger", "primary", "secondary",
  "dark", "light", "white", "indigo", "purple", "pink")
y <-  c("blue", "green", "orange", "red", "teal", "cyan",
  "#222e32", "#fefefe", "#ffffff", "#9b59b6", "#98796f", "#aea39a")
z <- c(rep(2,6), rep(4,6))

l <- lapply(1:length(x),
  function(i) div(class=paste0("g-col-", z[i], " small p-2 bg-", x[i]), 
    HTML(x[i], "<br/>(", y[i], ")")))

div(class="grid", style="--bs-gap: .5rem;", tagList(l))
```

# Callout Blocks

::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `warning`, `important`, `tip`, and `caution`.
:::

::: {.callout-tip}
### Tip with Title

This is an example of a callout with a title.
:::

::: {.callout-caution collapse="true" title="Cautious"}
### Expand To Learn About Collapse

This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse="true"` to collapse it by default or `collapse="false"` to make a collapsible callout that is expanded by default.
:::

::: {.callout-important title="Important"}
This is a callout with a title.
:::

::: {.callout-warning title="Warning"}
This is a callout with a title.
:::

# Typography

Bootstrap default line-height and sizing typically work. No change here aside from using `Inter` and `Roboto Condensed` Google fonts. This is how **bold**, *italic*, and <small>small</small> text look like. I can also play around with <span class="text-info">accented</span> text using Bootstrap CSS semantic classes.

## Heading 2

Sample paragraph content.

### Heading 3

Sample paragraph content with list of items:

- List 1
- List 2
- List 3

Ordered list:

#. List 1  
#. List 2  
#. List 3

#### Heading 4

Sample paragraph content.

> Blockquote title  
> Blockquote content comes here...   
> <small>-- And small description</small>[^bad]

[^bad]: HTML standards recommend placing quote sources outside the `<blockquote>` element, well...

##### Heading 5

Sample paragraph content.

Here is a footnote reference,[^1] and another one much longer.[^longnote]

[^1]: Here is the footnote.

[^longnote]: Here's one with multiple blocks.

    Subsequent paragraphs are indented to show that they belong to the previous footnote.

## Tables

I normally like my tables slightly more condensed than Bootstrap's default and to resemble LaTeX typesetting, so made a few simple changes here.

| fruit  | price  |
|--------|--------|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: Default

| fruit  | price  |
|--------|--------|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: borderless hover sm {.borderless .hover .sm}

| fruit  | price  |
|--------|--------|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: striped hover sm {.striped .hover .sm}

| fruit  | price  |
|--------|--------|
| apple  | 2.05   |
| pear   | 1.37   |
| orange | 3.09   |

: striped hover sm secondary {.striped .hover .sm .secondary}

```{r}
#| column: page
#| tbl-cap: A full-width table to increase content space

knitr::kable(
  mtcars[1:6, 1:10]
)
```

## Code Chunks and Plots

I call the `thematic::thematic_on()` function to auto-generate `lattice` and `ggplot2` palettes that complement my new Bootstrap colors.

```{r}
library(thematic)

# Specify my default sequential and qualitative palettes
thematic_on(
  bg="transparent", fg="#111719", accent="#789494",
  font = font_spec("Roboto Condensed"),
  sequential = sequential_gradient(fg_weight=.5, bg_weight=.5, fg_low=FALSE),
  qualitative = c(
    "#789494", "#445e64", "#222e32", 
    "#aea39a", "#98796f", "#9b59b6", "#3daee9",
    "#27ae60", "#edcd37", "#f67400", "#da4453")
  )
```

Note that calling `thematic_on()` modifies R session  `getOption("ggplot2.discrete.colour")` and `getOption("ggplot2.discrete.fill")` -- and that's how the underlying "magic" happens.

Next I apply -- opinionated -- changes to `ggthemes::theme_foundation()`, mostly transparent fills and custom fonts, etc. The final theme function is shown below.

These 2 functions are further expanded and documented in `./R/utils.R`, so I can handle dependencies and use them more flexibly in my blog posts, as needed.

```{r}
library(ggplot2)

theme_labs <- function(
  title = NA,
  subtitle = NA,
  base_size = 12,
  base_family = "Roboto Condensed",
  base_bg = "transparent",
  base_color = "#111719",
  ...) ggthemes::theme_foundation(
    base_size = base_size, base_family = base_family
  ) + theme(

    plot.margin = unit(c(1, 1, 1, 1), "lines"),
    text = element_text(color=base_color, lineheight=.9),
    line = element_line(linetype=1, color=base_color),
    rect = element_rect(fill=NA, linetype=0, color=NA),
    plot.background = element_rect(fill=base_bg, color=NA),
    panel.background = element_rect(fill=base_bg, color=NA),
    panel.grid = element_line(color=NULL, linetype=3),
    panel.grid.major = element_line(color=base_color),
    panel.grid.major.x = element_blank(),
    panel.grid.minor = element_blank(),
    strip.background = element_rect(),

    plot.title = element_text(
      face="plain", hjust=0, size=base_size*1.25),
    plot.subtitle = element_text(margin=margin(0,0,1,0, "lines"),
      face="plain", size=base_size, hjust=0),
    strip.text = element_text(
      face="bold", hjust=0, size=base_size),
    plot.caption = element_text(margin=margin(-0.5,4,0,0, "lines"),
      size=base_size*0.9, hjust=0),

    axis.text = element_text(size=base_size, face="bold"),
    axis.text.y = element_text(color=NULL),
    axis.title.x = element_text(color=base_color, 
      size=base_size, face="bold", hjust=1),
    axis.title.y = element_blank(),
    axis.ticks = element_line(color=NULL),
    axis.ticks.y = element_blank(),
    axis.ticks.x = element_line(color=NULL),
    axis.line = element_line(),
    axis.line.y = element_blank(),

    legend.background = element_rect(fill=NA, color=NA),
    legend.box.background = element_rect(fill=NA, color=NA),
    legend.title = element_text(size=base_size*0.9, hjust=0),
    legend.margin = margin(0,0,0,1, "lines"),
    legend.key.size = unit(.8, "lines"),
    legend.text = element_text(base_size*0.9),
    legend.position="right", legend.justification="left",
    legend.direction="vertical",
    ...)
```

Finally we generate a few sample `ggplot` and `lattice` charts below to make sure everything looks adequate.

```{r}
# Apply and check my new graphic theme
theme_set(theme_labs())

ggplot(mtcars, aes(factor(carb), mpg, fill=factor(carb))) + geom_col()
```

```{r}
ggplot(mtcars, aes(wt, mpg, color=carb)) + 
  geom_point() + geom_smooth() + 
  labs(
    title="My Long and Descriptive Plot Title", 
    subtitle="My very long subtitle with many units", 
    caption="My very long plot caption with many references.
             My very long plot caption with many references.")
```

```{r}
ggplot(faithfuld, aes(waiting, eruptions, z=density)) +
  geom_raster(aes(fill = density)) +
  geom_contour()
```

```{r}
ggplot(mtcars, aes(wt, mpg, color=factor(cyl))) + geom_point() +
  labs(title="My Title", subtitle="My Subtitle", caption="My plot caption")
```

Note that `thematic_on()` also does a little magic with base R graphics `par()` options. 

```{r}
lattice::show.settings()

x <- rchisq(100, df=4)
hist(x, freq=FALSE, ylim=c(0, 0.2), col=1, border=2)
grid(NA, NULL, col=4)
curve(dchisq(x, df=4), col=2, lty=2, lwd=2, add=TRUE)
```
